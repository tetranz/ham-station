<?php

/**
 * @file
 * Contains ham_station.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function ham_station_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ham_station module.
    case 'help.page.ham_station':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Information about amateur radio stations') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function ham_station_cron() {
  $config = \Drupal::configFactory()->get('ham_station.settings');

  if (!$config->get('geocode_cron_enable')) {
    return;
  }

  /** @var \Drupal\ham_station\Geocoder $geocoder */
  $geocoder = \Drupal::service('ham_station.geocoder');

  $geocoder->geoCode();
  $geocoder->copyGeocodeForDuplicates();
}

/**
 * Implements hook_theme().
 */
function ham_station_theme($existing, $type, $theme, $path) {
  return [
    'ham_station' => [
      'render element' => 'elements',
    ],
    'ham_neighbors' => [
      'variables' => [
        'form' => NULL,
        'callsign' => NULL,
        'message' => NULL,
        'view' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_library_info_alter().
 */
function ham_station_library_info_alter(&$libraries, $extension) {
  if ($extension !== 'ham_station') {
    return;
  }

  $js_libs = &$libraries['neighbors']['js'];
  $maps_lib_key = NULL;
  $maps_lib = NULL;

  foreach ($js_libs as $key => $lib) {
    if (strpos($key, 'maps.googleapis.com') == FALSE) {
      continue;
    }

    $maps_lib_key = $key;
    $maps_lib = $lib;
    break;
  }

  $api_key = \Drupal::configFactory()
    ->get('ham_station.settings')
    ->get('google_maps_api_key');

  unset($js_libs[$maps_lib_key]);

  // Add our Google API key.
  $maps_lib_key = str_replace('YOUR_API_KEY', $api_key, $maps_lib_key);
  $js_libs[$maps_lib_key] = $maps_lib;
}

/**
 * Implements hook_preprocess() for ham_station.
 */
function template_preprocess_ham_station(&$variables) {
  /** @var \Drupal\ham_station\Entity\HamStation $entity */
  $entity = $variables['elements']['#ham_station'];

  $variables['callsign'] = $entity->callsign->value;

  if (empty($entity->organization->value)) {
    $variables['name'] = sprintf('%s %s %s',
      $entity->first_name->value, $entity->middle_name->value, $entity->last_name->value
    );
  } else {
    $variables['name'] = $entity->organization->value;
  }

  $variables['address'] = $variables['elements']['address'];
  $variables['attributes']['data-lat'] = $entity->field_location->lat;
  $variables['attributes']['data-lng'] = $entity->field_location->lng;
}

/**
 * Implements hook_views_post_execute();
 */
function ham_station_views_post_execute(ViewExecutable $view) {
  if (!($view->id() === 'ham_neighbors' && $view->current_display === 'default')) {
    return;
  }

  // Set a location_id property on rows which have the same location as a
  // previous row. This helps us have a single map marker per location.  
  $prev_latlng = NULL;
  $prev_id = NULL;

  foreach ($view->result as $row) {
    $entity = $row->_entity;
    $latlng = sprintf('%s|%s', $entity->field_location->lat, $entity->field_location_lng);

    if ($latlng === $prev_latlng) {
      $row->location_id = $prev_id;
    }
    else {
      $prev_id = $row->id;
      $prev_latlng = $latlng;
    }
  }
}
